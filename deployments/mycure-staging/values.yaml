# MyCure Staging Configuration
# Minimal configuration for staging environment on DOKS

global:
  domain: stg.mycureapp.com
  namespace: mycure-staging
  environment: staging

  gateway:
    name: shared-gateway
    namespace: gateway-system

  storage:
    provider: cloud-default  # Use DigitalOcean Block Storage
    className: ""  # Auto-detect (do-block-storage)

# ===== INFRASTRUCTURE: Gateway Configuration =====
gateway:
  # Override domain for staging environment
  domain: stg.mycureapp.com

# ===== CORE: Monobase API =====
api:
  enabled: true

  image:
    repository: ghcr.io/monobaselabs/api
    tag: "0.1.4"
    pullPolicy: IfNotPresent

  replicaCount: 1  # Minimal for staging

  resources:
    requests:
      cpu: 100m  # Reduced for small cluster
      memory: 256Mi  # Reduced for small cluster
    limits:
      cpu: 500m
      memory: 512Mi

  gateway:
    hostname: ""  # Empty = uses api.<global.domain>

  livenessProbe:
    enabled: true

  readinessProbe:
    enabled: true

  podDisruptionBudget:
    enabled: false  # Not needed for single replica

  autoscaling:
    enabled: false  # No autoscaling for staging

  backup:
    enabled: false  # No Velero backups for staging

  externalSecrets:
    enabled: false  # No External Secrets for staging

  postgresql:
    serviceName: postgresql  # PostgreSQL deployed as separate release
    architecture: standalone  # Match actual PostgreSQL deployment
    auth:
      database: postgres  # Use default database
      username: postgres  # Use default user

  mailpit:
    enabled: true  # ✅ Enable Mailpit SMTP for staging

# ===== CORE: Monobase Account Frontend =====
account:
  enabled: true

  image:
    repository: ghcr.io/monobaselabs/accountapp
    tag: "1.0.2"
    pullPolicy: IfNotPresent

  replicaCount: 1

  resources:
    requests:
      cpu: 50m  # Reduced for small cluster
      memory: 64Mi  # Reduced for small cluster
    limits:
      cpu: 200m
      memory: 128Mi

  gateway:
    hostname: ""  # Empty = uses app.<global.domain>

  config:
    API_URL: "https://api.stg.mycureapp.com"

  podDisruptionBudget:
    enabled: false

# ===== HEALTHCARE: HapiHub API =====
hapihub:
  enabled: true

  image:
    repository: ghcr.io/mycurelabs/hapihub
    tag: "10.0.19"
    pullPolicy: IfNotPresent

  replicaCount: 1  # Minimal for staging

  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

  gateway:
    hostname: ""  # Empty = uses hapihub.<global.domain>
    timeouts:
      request: "60s"  # Extended timeout for OAuth callbacks

  env:
    - name: BETTER_AUTH_RATE_LIMIT_ENABLED
      value: "true"
    - name: BETTER_AUTH_RATE_LIMIT_WINDOW
      value: "60"
    - name: BETTER_AUTH_RATE_LIMIT_MAX
      value: "300"

  livenessProbe:
    enabled: true

  readinessProbe:
    enabled: true

  podDisruptionBudget:
    enabled: false

  autoscaling:
    enabled: false

  externalSecrets:
    enabled: true
    secretStore: gcp-secretstore
    secretStoreKind: ClusterSecretStore
    refreshInterval: 1h
    secrets:
      - secretKey: GOOGLE_CLIENT_ID
        remoteKey: mycure-staging-google-oauth-client-id
      - secretKey: GOOGLE_CLIENT_SECRET
        remoteKey: mycure-staging-google-oauth-client-secret

  mongodb:
    serviceName: mongodb
    database: hapihub
    username: root
    replicaSet: rs0

# ===== HEALTHCARE: MyCure Frontend =====
mycure:
  enabled: true

  image:
    repository: ghcr.io/mycurelabs/mycureapp
    tag: "10.0.30"
    pullPolicy: IfNotPresent

  replicaCount: 1

  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

  gateway:
    hostname: ""  # Empty = uses app.<global.domain>

  config:
    API_URL: "https://hapihub.stg.mycureapp.com"
    HAPIHUB_URL: "https://hapihub.stg.mycureapp.com"

  podDisruptionBudget:
    enabled: false

# ===== CORE: PostgreSQL Database =====

# ===== HEALTHCARE: SyncD Real-time Synchronization =====
syncd:
  enabled: true

  image:
    repository: ghcr.io/mycurelabs/syncd
    tag: "5.130.22"
    pullPolicy: IfNotPresent

  replicaCount: 1  # Minimal for staging

  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

  gateway:
    hostname: ""  # Empty = uses syncd.<global.domain>

  livenessProbe:
    enabled: true

  readinessProbe:
    enabled: true

  podDisruptionBudget:
    enabled: false

  autoscaling:
    enabled: false

  externalSecrets:
    enabled: false

  mongodb:
    serviceName: mongodb
    database: hapihub  # Shares database with HapiHub
    username: root
    replicaSet: rs0

postgresql:
  enabled: true

  # Staging uses standalone (not replication)
  architecture: standalone

  image:
    repository: bitnamilegacy/postgresql
    tag: 16.4.0-debian-12-r13  # Use stable version from legacy repo

  auth:
    enabled: true
    # Using default postgres user and database
    # Use External Secrets Operator managed secret instead of auto-generating
    existingSecret: postgresql
    secretKeys:
      adminPasswordKey: postgres-password

  persistence:
    enabled: true
    storageClass: ""  # Auto-detect (do-block-storage)
    size: 20Gi  # Smaller for staging

  resources:
    requests:
      cpu: 100m  # Reduced for small cluster
      memory: 512Mi  # Reduced for small cluster
    limits:
      cpu: 500m
      memory: 1Gi

  podDisruptionBudget:
    enabled: false

# ===== CORE: MongoDB Database =====
mongodb:
  enabled: true

  # Always use replicaset for HapiHub (requires change streams)
  architecture: replicaset
  replicaCount: 1  # Single node RS for staging

  image:
    repository: bitnamilegacy/mongodb
    tag: 7.0.15-debian-12-r0

  auth:
    rootUser: root
    # Use External Secrets Operator managed secret instead of auto-generating
    existingSecret: mongodb

  # Disable arbiter for single-node replica set
  arbiter:
    enabled: false

  persistence:
    enabled: true
    storageClass: ""  # Auto-detect (do-block-storage)
    size: 20Gi

  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi

  podDisruptionBudget:
    enabled: false

# ===== OPTIONAL: Valkey (Redis Cache) =====
valkey:
  enabled: false  # Not needed for staging

  architecture: standalone  # Not replication for staging

  image:
    repository: bitnamilegacy/valkey
    tag: 8.0.1-debian-12-r2  # Use stable version from legacy repo

  master:
    persistence:
      enabled: true
      storageClass: ""
      size: 4Gi

  resources:
    requests:
      cpu: 50m  # Reduced for small cluster
      memory: 128Mi  # Reduced for small cluster
    limits:
      cpu: 250m
      memory: 256Mi

# ===== OPTIONAL: MinIO (Object Storage) =====
minio:
  enabled: true  # ✅ Enable for staging
  
  # Image configuration (use bitnamilegacy for consistency)
  image:
    repository: bitnamilegacy/minio
    tag: "2025.7.23-debian-12-r3"
  
  # Deployment mode
  mode: standalone
  
  # StatefulSet configuration (Bitnami chart uses statefulset.replicaCount)
  statefulset:
    replicaCount: 1

  # Authentication (Bitnami chart uses auth.rootUser/rootPassword)
  auth:
    # Use External Secrets Operator managed secret instead of hardcoded credentials
    existingSecret: minio

  persistence:
    enabled: true
    storageClass: ""  # Auto-detect (do-block-storage)
    size: 10Gi

  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

  # Bucket configuration (Bitnami chart uses defaultBuckets as string)
  defaultBuckets: "monobase-files"
  
  # Bucket configuration for API chart template
  buckets:
    - name: "monobase-files"
  region: "us-east-1"

  # Security contexts for restricted PodSecurity (Bitnami uses podSecurityContext)
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: "OnRootMismatch"

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault

  # Gateway API HTTPRoute configuration
  gateway:
    enabled: true
    hostname: ""  # Empty = uses storage.stg.mycureapp.com
    rateLimit:
      enabled: false  # Disable - BackendTrafficPolicy not supported by gateway

# ===== STAGING: Mailpit (Email Testing) =====
# Note: Mailpit is deployed as separate ArgoCD app (Wave 2)
# SMTP config is passed to API via api.mailpit.enabled above
mailpit:
  enabled: true  # ✅ Enable for staging email testing

  resources:
    requests:
      cpu: 25m  # Reduced for small cluster
      memory: 32Mi  # Reduced for small cluster
    limits:
      cpu: 100m
      memory: 64Mi

  # Gateway API HTTPRoute configuration
  gateway:
    enabled: true
    hostname: ""  # Uses mail.stg.mycureapp.com

# ===== External DNS =====
# Automatic DNS record management from HTTPRoutes and Services
externalDNS:
  enabled: false

  instances:
    # Primary Cloudflare account for mycureapp.com
    - name: primary
      enabled: true
      provider: cloudflare

      domainFilters:
        - mycureapp.com

      cloudflare:
        proxied: false  # DNS only, no Cloudflare proxy
        apiTokenSecretRef:
          name: cloudflare-api-token
          key: api-token

      resources:
        requests:
          cpu: 10m
          memory: 32Mi
        limits:
          cpu: 50m
          memory: 64Mi

# ===== External Secrets =====
externalSecrets:
  enabled: false  # TODO: Enable when secrets are configured
  provider: sops  # Or aws/azure/gcp

# ===== Monitoring =====
monitoring:
  enabled: false  # Disable for minimal staging

# ===== Backup (Velero) =====
backup:
  enabled: false  # Disable for staging

# ===== Security =====
networkPolicies:
  enabled: true
  defaultDeny: true

podSecurityStandards:
  enabled: true
  level: restricted

# Security tools (disabled for staging)
security:
  kyverno:
    enabled: false

  falco:
    enabled: false

# ===== Resource Quotas =====
resourceQuotas:
  enabled: false
