# MyCure Staging Configuration
# Minimal configuration for staging environment on DOKS

global:
  domain: stg.mycureapp.com
  namespace: mycure-staging
  environment: staging

  gateway:
    name: shared-gateway
    namespace: gateway-system

  storage:
    provider: cloud-default  # Use DigitalOcean Block Storage
    className: ""  # Auto-detect (do-block-storage)

# ===== CORE: Monobase API =====
api:
  enabled: true

  image:
    repository: ghcr.io/monobaselabs/api
    tag: "0.1.4"
    pullPolicy: IfNotPresent

  replicaCount: 1  # Minimal for staging

  resources:
    requests:
      cpu: 100m  # Reduced for small cluster
      memory: 256Mi  # Reduced for small cluster
    limits:
      cpu: 500m
      memory: 512Mi

  gateway:
    hostname: ""  # Empty = uses api.<global.domain>

  livenessProbe:
    enabled: true

  readinessProbe:
    enabled: true

  podDisruptionBudget:
    enabled: false  # Not needed for single replica

  autoscaling:
    enabled: false  # No autoscaling for staging

  backup:
    enabled: false  # No Velero backups for staging

  externalSecrets:
    enabled: false  # No External Secrets for staging

  postgresql:
    serviceName: postgresql  # PostgreSQL deployed as separate release
    architecture: standalone  # Match actual PostgreSQL deployment
    auth:
      database: postgres  # Use default database
      username: postgres  # Use default user

  mailpit:
    enabled: true  # ✅ Enable Mailpit SMTP for staging

# ===== CORE: Monobase Account Frontend =====
account:
  enabled: true

  image:
    repository: ghcr.io/monobaselabs/accountapp
    tag: "1.0.2"
    pullPolicy: IfNotPresent

  replicaCount: 1

  resources:
    requests:
      cpu: 50m  # Reduced for small cluster
      memory: 64Mi  # Reduced for small cluster
    limits:
      cpu: 200m
      memory: 128Mi

  gateway:
    hostname: ""  # Empty = uses app.<global.domain>

  config:
    API_URL: "https://api.stg.mycureapp.com"

  podDisruptionBudget:
    enabled: false

# ===== CORE: PostgreSQL Database =====
postgresql:
  enabled: true

  # Staging uses standalone (not replication)
  architecture: standalone

  image:
    repository: bitnamilegacy/postgresql
    tag: 16.4.0-debian-12-r13  # Use stable version from legacy repo

  auth:
    enabled: true
    # Using default postgres user and database

  persistence:
    enabled: true
    storageClass: ""  # Auto-detect (do-block-storage)
    size: 20Gi  # Smaller for staging

  resources:
    requests:
      cpu: 100m  # Reduced for small cluster
      memory: 512Mi  # Reduced for small cluster
    limits:
      cpu: 500m
      memory: 1Gi

  podDisruptionBudget:
    enabled: false

# ===== OPTIONAL: Valkey (Redis Cache) =====
valkey:
  enabled: false  # Not needed for staging

  architecture: standalone  # Not replication for staging

  image:
    repository: bitnamilegacy/valkey
    tag: 8.0.1-debian-12-r2  # Use stable version from legacy repo

  master:
    persistence:
      enabled: true
      storageClass: ""
      size: 4Gi

  resources:
    requests:
      cpu: 50m  # Reduced for small cluster
      memory: 128Mi  # Reduced for small cluster
    limits:
      cpu: 250m
      memory: 256Mi

# ===== OPTIONAL: MinIO (Object Storage) =====
minio:
  enabled: true
  mode: standalone
  replicas: 1

  # Official MinIO chart uses rootUser/rootPassword directly
  rootUser: minioadmin
  rootPassword: minioadmin

  persistence:
    enabled: true
    storageClass: ""  # Auto-detect (do-block-storage)
    size: 10Gi

  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

  # Bucket configuration for official MinIO chart
  buckets:
    - name: monobase-files
      policy: none
      purge: false

  # Security contexts for restricted PodSecurity
  securityContext:
    enabled: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault

  containerSecurityContext:
    enabled: true
    runAsUser: 1000
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
        - ALL

# ===== STAGING: Mailpit (Email Testing) =====
# Note: Mailpit is deployed as separate ArgoCD app (Wave 2)
# SMTP config is passed to API via api.mailpit.enabled above
mailpit:
  enabled: true  # ✅ Enable for staging email testing

  resources:
    requests:
      cpu: 25m  # Reduced for small cluster
      memory: 32Mi  # Reduced for small cluster
    limits:
      cpu: 100m
      memory: 64Mi

# ===== External Secrets =====
externalSecrets:
  enabled: false  # TODO: Enable when secrets are configured
  provider: sops  # Or aws/azure/gcp

# ===== Monitoring =====
monitoring:
  enabled: false  # Disable for minimal staging

# ===== Backup (Velero) =====
backup:
  enabled: false  # Disable for staging

# ===== Security =====
networkPolicies:
  enabled: true
  defaultDeny: true

podSecurityStandards:
  enabled: true
  level: restricted

# Security tools (disabled for staging)
security:
  kyverno:
    enabled: false

  falco:
    enabled: false

# ===== Resource Quotas =====
resourceQuotas:
  enabled: false
